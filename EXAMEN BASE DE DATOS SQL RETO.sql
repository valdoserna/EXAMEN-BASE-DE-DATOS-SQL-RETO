--2.1 TABLA PERSONAS
CREATE TABLE PERSONAS (
    NOMBRE VARCHAR(100),
    LOGIN INT UNIQUE,
    AREA INT,
    ZONA INT,
    PUESTO INT
);

--2.2 TABLA AREA
CREATE TABLE AREA (
    IDAREA SERIAL PRIMARY KEY,
    DESCRIPCION VARCHAR(50)
);

--2.3 TABLA ZONA
CREATE TABLE ZONA (
    IDZONA SERIAL PRIMARY KEY,
    DESCRIPCION VARCHAR(50)
);

--2.4 TABLA PUESTO
CREATE TABLE PUESTO (
    IDPUESTO SERIAL PRIMARY KEY,
    DESCRIPCION VARCHAR(50)
);


-- Insertar datos en la tabla AREA
INSERT INTO AREA (DESCRIPCION) VALUES
('TELEFONIA'),
('IMPLEMENTACION'),
('CAPACITACION'),
('CALIDAD'),
('DESARROLLO');

-- Insertar datos en la tabla ZONA
INSERT INTO ZONA (DESCRIPCION) VALUES
('DEL VALLE'),
('NARVARTE'),
('RELOX'),
('TORRES');

-- Insertar datos en la tabla PUESTO
INSERT INTO PUESTO (DESCRIPCION) VALUES
('COORDINADOR'),
('EMPLEADO');

-- Insertar datos en la tabla PERSONAS
INSERT INTO PERSONAS (NOMBRE, LOGIN, AREA, ZONA, PUESTO) VALUES
('EDGAR', 5654, 1, 1, 1),
('CESAR', 5652, 1, 1, 2),
('URIEL', 5650, 1, 2, 2),
('ISRAEL', 5648, 1, 3, 2),
('JOSUE', 5646, 3, 1, 1),
('FELIPE', 5644, 3, 4, 2),
('GUILLERMO', 5642, 2, 2, 1),
('ALI', 5640, 2, 3, 2),
('MAURO', 5638, 4, 1, 1),
('MIRIAM', 5636, 4, 4, 2),
('RICARDO', 5634, 5, 2, 2),
('LUIS', 5632, 5, 2, 1),
('JOSE', 5630, 5, 3, 2);


--3.- QUERYS
/* 3.1 MOSTRAR A TODOS LOS COORDINADORESMostrar a todos los coordinadores
Se utiliza JOIN para unir la tabla PERSONAS 
con la tabla PUESTO a través de la relación entre p.PUESTO y pu.IDPUESTO.*/
SELECT NOMBRE
FROM PERSONAS 
JOIN PUESTO  ON PUESTO = IDPUESTO
/*WHERE filtra los resultados para mostrar 
solo aquellos registros donde la DESCRIPCION del puesto sea 'COORDINADOR'*/
WHERE DESCRIPCION = 'COORDINADOR';
--Con mas atributos
SELECT
   p.NOMBRE,
   p.LOGIN,
    a.DESCRIPCION AS AREA,
    z.DESCRIPCION AS ZONA,
    pu.DESCRIPCION AS PUESTO
FROM
    PERSONAS p
JOIN
    PUESTO pu ON p.PUESTO = pu.IDPUESTO
JOIN
    AREA a ON p.AREA = a.IDAREA
JOIN
    ZONA z ON p.ZONA = z.IDZONA
WHERE
    pu.DESCRIPCION = 'COORDINADOR';


--3.2 MOSTRAR A TODAS LAS PERSONAS QUE LABOREN EN LA ZONA DEL VALLE
SELECT
    p.NOMBRE,
    p.LOGIN,
    a.DESCRIPCION AS AREA,
    z.DESCRIPCION AS ZONA,
    pu.DESCRIPCION AS PUESTO
FROM
    PERSONAS p
JOIN
    ZONA z ON p.ZONA = z.IDZONA
JOIN
    AREA a ON p.AREA = a.IDAREA
JOIN
    PUESTO pu ON p.PUESTO = pu.IDPUESTO
WHERE
    z.DESCRIPCION = 'DEL VALLE';

	--3.3 MOSTRAR A TODOS LOS EMPLEADOS QUE LABOREN EN LA ZONA NARVARTE
--ESPECIFICO
SELECT p.NOMBRE
FROM PERSONAS p
JOIN PUESTO pu ON p.PUESTO = pu.IDPUESTO
JOIN ZONA z ON p.ZONA = z.IDZONA
WHERE pu.DESCRIPCION = 'EMPLEADO' AND z.DESCRIPCION = 'NARVARTE';
--DETALLADA
SELECT
    p.NOMBRE,
    p.LOGIN,
    a.DESCRIPCION AS AREA,
    z.DESCRIPCION AS ZONA,
    pu.DESCRIPCION AS PUESTO
FROM
    PERSONAS p
JOIN
    PUESTO pu ON p.PUESTO = pu.IDPUESTO
JOIN
    ZONA z ON p.ZONA = z.IDZONA
JOIN
    AREA a ON p.AREA = a.IDAREA
WHERE
    pu.DESCRIPCION = 'EMPLEADO' AND z.DESCRIPCION = 'NARVARTE';
	--3.4 AGRUPAR TODAS LAS PERSONAS POR AREA
--ESPECIFICA
SELECT a.DESCRIPCION AS AREA, COUNT(p.NOMBRE) AS NUMERO_DE_PERSONAS
FROM PERSONAS p
JOIN AREA a ON p.AREA = a.IDAREA
GROUP BY a.DESCRIPCION;
--DETALLADA
SELECT
    a.DESCRIPCION AS AREA,
    COUNT(p.NOMBRE) AS NUMERO_DE_PERSONAS,
    STRING_AGG(p.NOMBRE, ', ') AS NOMBRES_DE_PERSONAS
FROM
    PERSONAS p
JOIN
    AREA a ON p.AREA = a.IDAREA
GROUP BY
    a.DESCRIPCION;
--3.5 CON UN CRUCE OBTENER EL SIGUIENTE RESULTADO
SELECT p.NOMBRE, p.LOGIN, a.DESCRIPCION AS AREA, z.DESCRIPCION AS ZONA, pu.DESCRIPCION AS PUESTO
FROM PERSONAS p
JOIN AREA a ON p.AREA = a.IDAREA
JOIN ZONA z ON p.ZONA = z.IDZONA
JOIN PUESTO pu ON p.PUESTO = pu.IDPUESTO;

/*CREAR UN SP CON UN PARAMETRO DE ENTRADA @IDZONA QUE MUESTRE TODOS LAS PERSONAS
DE LA ZONA INDICADA EN EL PARAMETRO.*/
CREATE OR REPLACE FUNCTION sp_personas_por_zona(id_zona INT)
RETURNS TABLE (nombre VARCHAR(100), login INT, area VARCHAR(50), zona VARCHAR(50), puesto VARCHAR(50)) AS $$
BEGIN
    RETURN QUERY
    SELECT per.NOMBRE, per.LOGIN, ar.DESCRIPCION, zo.DESCRIPCION, pue.DESCRIPCION
    FROM PERSONAS AS per
    JOIN AREA AS ar ON per.AREA = ar.IDAREA
    JOIN ZONA AS zo ON per.ZONA = zo.IDZONA
    JOIN PUESTO AS pue ON per.PUESTO = pue.IDPUESTO
    WHERE per.ZONA = id_zona;
END;
$$ LANGUAGE plpgsql;

-- Ejemplo de uso:
SELECT * FROM sp_personas_por_zona(1);

/*CREAR UN SP CON UN PARAMETRO DE ENTRADA @PUESTO QUE MUESTRE TODAS LAS PERSONAS
QUE TENGAN EL PUESTO INDICADO EN EL PARAMETRO.*/
CREATE OR REPLACE FUNCTION sp_personas_por_puesto(id_puesto INT)
RETURNS TABLE (nombre VARCHAR(100), login INT, area VARCHAR(50), zona VARCHAR(50), puesto VARCHAR(50)) AS $$
BEGIN
    RETURN QUERY
    SELECT per.NOMBRE, per.LOGIN, ar.DESCRIPCION, zo.DESCRIPCION, pue.DESCRIPCION
    FROM PERSONAS AS per
    JOIN AREA AS ar ON per.AREA = ar.IDAREA
    JOIN ZONA AS zo ON per.ZONA = zo.IDZONA
    JOIN PUESTO AS pue ON per.PUESTO = pue.IDPUESTO
    WHERE per.PUESTO = id_puesto;
END;
$$ LANGUAGE plpgsql;
-- Ejemplo de uso:
SELECT * FROM sp_personas_por_puesto(2);

/*CREAR UN SP PARA OBTENER EL SIGUIENTE RESULTADO*/
CREATE OR REPLACE FUNCTION sp_gente_por_area()
RETURNS TABLE (area VARCHAR(50), gente_asignada BIGINT) AS $$
BEGIN
    RETURN QUERY
    SELECT a.DESCRIPCION, COUNT(p.NOMBRE)
    FROM PERSONAS p
    JOIN AREA a ON p.AREA = a.IDAREA
    GROUP BY a.DESCRIPCION;
END;
$$ LANGUAGE plpgsql;

-- Ejemplo de uso:
SELECT * FROM sp_gente_por_area();